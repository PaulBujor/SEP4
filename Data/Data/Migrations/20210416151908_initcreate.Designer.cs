// <auto-generated />
using System;
using Data.Properties.Persistence;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace Data.Migrations
{
    [DbContext(typeof(Database))]
    [Migration("20210416151908_initcreate")]
    partial class initcreate
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "5.0.5");

            modelBuilder.Entity("Data.Data.Configuration", b =>
                {
                    b.Property<long>("ConfigurationID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<bool>("Active")
                        .HasColumnType("INTEGER");

                    b.Property<double>("Max")
                        .HasColumnType("REAL");

                    b.Property<double>("MinOrDefault")
                        .HasColumnType("REAL");

                    b.HasKey("ConfigurationID");

                    b.ToTable("Configurations");
                });

            modelBuilder.Entity("Data.Data.Device", b =>
                {
                    b.Property<long>("DeviceID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<long?>("DeviceConfigurationConfigurationID")
                        .HasColumnType("INTEGER");

                    b.HasKey("DeviceID");

                    b.HasIndex("DeviceConfigurationConfigurationID");

                    b.ToTable("Devices");
                });

            modelBuilder.Entity("Data.Data.Measurement", b =>
                {
                    b.Property<long>("MeasurementID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<long?>("DeviceID")
                        .HasColumnType("INTEGER");

                    b.Property<long?>("DeviceID1")
                        .HasColumnType("INTEGER");

                    b.Property<long?>("DeviceID2")
                        .HasColumnType("INTEGER");

                    b.Property<long?>("DeviceID3")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("Timestamp")
                        .HasColumnType("TEXT");

                    b.Property<double>("Value")
                        .HasColumnType("REAL");

                    b.HasKey("MeasurementID");

                    b.HasIndex("DeviceID");

                    b.HasIndex("DeviceID1");

                    b.HasIndex("DeviceID2");

                    b.HasIndex("DeviceID3");

                    b.ToTable("Measurements");
                });

            modelBuilder.Entity("Data.Data.Settings", b =>
                {
                    b.Property<long>("SettingsID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<long?>("AlarmConfigurationConfigurationID")
                        .HasColumnType("INTEGER");

                    b.Property<long?>("CO2ConfigurationConfigurationID")
                        .HasColumnType("INTEGER");

                    b.Property<long?>("DeviceConfigurationConfigurationID")
                        .HasColumnType("INTEGER");

                    b.Property<long?>("HumidityConfigurationConfigurationID")
                        .HasColumnType("INTEGER");

                    b.Property<long?>("TemperatureConfigurationConfigurationID")
                        .HasColumnType("INTEGER");

                    b.HasKey("SettingsID");

                    b.HasIndex("AlarmConfigurationConfigurationID");

                    b.HasIndex("CO2ConfigurationConfigurationID");

                    b.HasIndex("DeviceConfigurationConfigurationID");

                    b.HasIndex("HumidityConfigurationConfigurationID");

                    b.HasIndex("TemperatureConfigurationConfigurationID");

                    b.ToTable("Settings");
                });

            modelBuilder.Entity("Data.Data.Device", b =>
                {
                    b.HasOne("Data.Data.Configuration", "DeviceConfiguration")
                        .WithMany()
                        .HasForeignKey("DeviceConfigurationConfigurationID");

                    b.Navigation("DeviceConfiguration");
                });

            modelBuilder.Entity("Data.Data.Measurement", b =>
                {
                    b.HasOne("Data.Data.Device", null)
                        .WithMany("Alarm")
                        .HasForeignKey("DeviceID");

                    b.HasOne("Data.Data.Device", null)
                        .WithMany("CO2")
                        .HasForeignKey("DeviceID1");

                    b.HasOne("Data.Data.Device", null)
                        .WithMany("Humidity")
                        .HasForeignKey("DeviceID2");

                    b.HasOne("Data.Data.Device", null)
                        .WithMany("Temperature")
                        .HasForeignKey("DeviceID3");
                });

            modelBuilder.Entity("Data.Data.Settings", b =>
                {
                    b.HasOne("Data.Data.Configuration", "AlarmConfiguration")
                        .WithMany()
                        .HasForeignKey("AlarmConfigurationConfigurationID");

                    b.HasOne("Data.Data.Configuration", "CO2Configuration")
                        .WithMany()
                        .HasForeignKey("CO2ConfigurationConfigurationID");

                    b.HasOne("Data.Data.Configuration", "DeviceConfiguration")
                        .WithMany()
                        .HasForeignKey("DeviceConfigurationConfigurationID");

                    b.HasOne("Data.Data.Configuration", "HumidityConfiguration")
                        .WithMany()
                        .HasForeignKey("HumidityConfigurationConfigurationID");

                    b.HasOne("Data.Data.Configuration", "TemperatureConfiguration")
                        .WithMany()
                        .HasForeignKey("TemperatureConfigurationConfigurationID");

                    b.Navigation("AlarmConfiguration");

                    b.Navigation("CO2Configuration");

                    b.Navigation("DeviceConfiguration");

                    b.Navigation("HumidityConfiguration");

                    b.Navigation("TemperatureConfiguration");
                });

            modelBuilder.Entity("Data.Data.Device", b =>
                {
                    b.Navigation("Alarm");

                    b.Navigation("CO2");

                    b.Navigation("Humidity");

                    b.Navigation("Temperature");
                });
#pragma warning restore 612, 618
        }
    }
}
