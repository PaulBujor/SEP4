// <auto-generated />
using System;
using Data.Properties.Persistence;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace Data.Migrations
{
    [DbContext(typeof(Database))]
    [Migration("20210524124801_DeviceNameUpdate")]
    partial class DeviceNameUpdate
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.5")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Data.Data.Device", b =>
                {
                    b.Property<long>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<long>("DeviceID")
                        .HasColumnType("bigint");

                    b.Property<string>("DeviceName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long?>("DeviceThresholdsThresholdsID")
                        .HasColumnType("bigint");

                    b.HasKey("ID");

                    b.HasIndex("DeviceThresholdsThresholdsID");

                    b.ToTable("Devices");
                });

            modelBuilder.Entity("Data.Data.MeasurementSet", b =>
                {
                    b.Property<long>("MeasurementID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<double>("CO2")
                        .HasColumnType("float");

                    b.Property<long?>("DeviceID")
                        .HasColumnType("bigint");

                    b.Property<double>("Humidity")
                        .HasColumnType("float");

                    b.Property<double>("Sound")
                        .HasColumnType("float");

                    b.Property<double>("Temperature")
                        .HasColumnType("float");

                    b.Property<DateTime>("Timestamp")
                        .HasColumnType("datetime2");

                    b.HasKey("MeasurementID");

                    b.HasIndex("DeviceID");

                    b.ToTable("Measurements");
                });

            modelBuilder.Entity("Data.Data.Thresholds", b =>
                {
                    b.Property<long>("ThresholdsID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("DeviceConfiguration")
                        .HasColumnType("bit");

                    b.Property<int>("MaxCo2")
                        .HasColumnType("int");

                    b.Property<int>("MaxHumidity")
                        .HasColumnType("int");

                    b.Property<int>("MaxTemperature")
                        .HasColumnType("int");

                    b.Property<int>("MinCo2")
                        .HasColumnType("int");

                    b.Property<int>("MinHumidity")
                        .HasColumnType("int");

                    b.Property<int>("MinTemperature")
                        .HasColumnType("int");

                    b.HasKey("ThresholdsID");

                    b.ToTable("Thresholds");
                });

            modelBuilder.Entity("Data.Data.User", b =>
                {
                    b.Property<long>("UserID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Password")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserID");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("DeviceUser", b =>
                {
                    b.Property<long>("DevicesID")
                        .HasColumnType("bigint");

                    b.Property<long>("OwnersUserID")
                        .HasColumnType("bigint");

                    b.HasKey("DevicesID", "OwnersUserID");

                    b.HasIndex("OwnersUserID");

                    b.ToTable("DeviceUser");
                });

            modelBuilder.Entity("Data.Data.Device", b =>
                {
                    b.HasOne("Data.Data.Thresholds", "DeviceThresholds")
                        .WithMany()
                        .HasForeignKey("DeviceThresholdsThresholdsID");

                    b.Navigation("DeviceThresholds");
                });

            modelBuilder.Entity("Data.Data.MeasurementSet", b =>
                {
                    b.HasOne("Data.Data.Device", null)
                        .WithMany("Measurements")
                        .HasForeignKey("DeviceID");
                });

            modelBuilder.Entity("DeviceUser", b =>
                {
                    b.HasOne("Data.Data.Device", null)
                        .WithMany()
                        .HasForeignKey("DevicesID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Data.Data.User", null)
                        .WithMany()
                        .HasForeignKey("OwnersUserID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Data.Data.Device", b =>
                {
                    b.Navigation("Measurements");
                });
#pragma warning restore 612, 618
        }
    }
}
