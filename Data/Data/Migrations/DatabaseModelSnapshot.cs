// <auto-generated />
using System;
using Data.Properties.Persistence;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace Data.Migrations
{
    [DbContext(typeof(Database))]
    partial class DatabaseModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.5")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Data.Data.Configuration", b =>
                {
                    b.Property<long>("ConfigurationID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("Active")
                        .HasColumnType("bit");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("Max")
                        .HasColumnType("float");

                    b.Property<double>("MinOrDefault")
                        .HasColumnType("float");

                    b.HasKey("ConfigurationID");

                    b.ToTable("Configurations");

                    b.HasDiscriminator<string>("Discriminator").HasValue("Configuration");
                });

            modelBuilder.Entity("Data.Data.Device", b =>
                {
                    b.Property<long>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<long>("DeviceID")
                        .HasColumnType("bigint");

                    b.Property<long?>("DeviceSettingsSettingsID")
                        .HasColumnType("bigint");

                    b.HasKey("ID");

                    b.HasIndex("DeviceSettingsSettingsID");

                    b.ToTable("Devices");
                });

            modelBuilder.Entity("Data.Data.MeasurementSet", b =>
                {
                    b.Property<long>("MeasurementID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<double>("Alarm")
                        .HasColumnType("float");

                    b.Property<double>("CO2")
                        .HasColumnType("float");

                    b.Property<long?>("DeviceID")
                        .HasColumnType("bigint");

                    b.Property<double>("Humidity")
                        .HasColumnType("float");

                    b.Property<double>("Temperature")
                        .HasColumnType("float");

                    b.Property<DateTime>("Timestamp")
                        .HasColumnType("datetime2");

                    b.HasKey("MeasurementID");

                    b.HasIndex("DeviceID");

                    b.ToTable("Measurements");
                });

            modelBuilder.Entity("Data.Data.Settings", b =>
                {
                    b.Property<long>("SettingsID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<long?>("AlarmConfigurationConfigurationID")
                        .HasColumnType("bigint");

                    b.Property<long?>("CO2ConfigurationConfigurationID")
                        .HasColumnType("bigint");

                    b.Property<long?>("DeviceConfigurationConfigurationID")
                        .HasColumnType("bigint");

                    b.Property<long?>("HumidityConfigurationConfigurationID")
                        .HasColumnType("bigint");

                    b.Property<long?>("TemperatureConfigurationConfigurationID")
                        .HasColumnType("bigint");

                    b.HasKey("SettingsID");

                    b.HasIndex("AlarmConfigurationConfigurationID");

                    b.HasIndex("CO2ConfigurationConfigurationID");

                    b.HasIndex("DeviceConfigurationConfigurationID");

                    b.HasIndex("HumidityConfigurationConfigurationID");

                    b.HasIndex("TemperatureConfigurationConfigurationID");

                    b.ToTable("Settings");
                });

            modelBuilder.Entity("Data.Data.ConcreteConfigurations.AlarmConfiguration", b =>
                {
                    b.HasBaseType("Data.Data.Configuration");

                    b.HasDiscriminator().HasValue("AlarmConfiguration");
                });

            modelBuilder.Entity("Data.Data.ConcreteConfigurations.CO2Configuration", b =>
                {
                    b.HasBaseType("Data.Data.Configuration");

                    b.HasDiscriminator().HasValue("CO2Configuration");
                });

            modelBuilder.Entity("Data.Data.ConcreteConfigurations.DeviceConfiguration", b =>
                {
                    b.HasBaseType("Data.Data.Configuration");

                    b.HasDiscriminator().HasValue("DeviceConfiguration");
                });

            modelBuilder.Entity("Data.Data.ConcreteConfigurations.HumidityConfiguration", b =>
                {
                    b.HasBaseType("Data.Data.Configuration");

                    b.HasDiscriminator().HasValue("HumidityConfiguration");
                });

            modelBuilder.Entity("Data.Data.ConcreteConfigurations.TemperatureConfiguration", b =>
                {
                    b.HasBaseType("Data.Data.Configuration");

                    b.HasDiscriminator().HasValue("TemperatureConfiguration");
                });

            modelBuilder.Entity("Data.Data.Device", b =>
                {
                    b.HasOne("Data.Data.Settings", "DeviceSettings")
                        .WithMany()
                        .HasForeignKey("DeviceSettingsSettingsID");

                    b.Navigation("DeviceSettings");
                });

            modelBuilder.Entity("Data.Data.MeasurementSet", b =>
                {
                    b.HasOne("Data.Data.Device", null)
                        .WithMany("Measurements")
                        .HasForeignKey("DeviceID");
                });

            modelBuilder.Entity("Data.Data.Settings", b =>
                {
                    b.HasOne("Data.Data.ConcreteConfigurations.AlarmConfiguration", "AlarmConfiguration")
                        .WithMany()
                        .HasForeignKey("AlarmConfigurationConfigurationID");

                    b.HasOne("Data.Data.ConcreteConfigurations.CO2Configuration", "CO2Configuration")
                        .WithMany()
                        .HasForeignKey("CO2ConfigurationConfigurationID");

                    b.HasOne("Data.Data.ConcreteConfigurations.DeviceConfiguration", "DeviceConfiguration")
                        .WithMany()
                        .HasForeignKey("DeviceConfigurationConfigurationID");

                    b.HasOne("Data.Data.ConcreteConfigurations.HumidityConfiguration", "HumidityConfiguration")
                        .WithMany()
                        .HasForeignKey("HumidityConfigurationConfigurationID");

                    b.HasOne("Data.Data.ConcreteConfigurations.TemperatureConfiguration", "TemperatureConfiguration")
                        .WithMany()
                        .HasForeignKey("TemperatureConfigurationConfigurationID");

                    b.Navigation("AlarmConfiguration");

                    b.Navigation("CO2Configuration");

                    b.Navigation("DeviceConfiguration");

                    b.Navigation("HumidityConfiguration");

                    b.Navigation("TemperatureConfiguration");
                });

            modelBuilder.Entity("Data.Data.Device", b =>
                {
                    b.Navigation("Measurements");
                });
#pragma warning restore 612, 618
        }
    }
}
